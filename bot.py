import telebot
from telebot import types
import requests
from bs4 import BeautifulSoup as bs
import re

TOKEN = ''
bot = telebot.TeleBot(TOKEN)

# Dictionary to store user input for each chat
user_inputs = {}


def get_html_content(url):
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'
    }
    response = requests.get(url, headers=headers)
    return response.text


def extract_atb_data(html_content):
    soup = bs(html_content, "html.parser")  # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ BeautifulSoup –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É HTML-–∑–º—ñ—Å—Ç—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏.
    prices = soup.find_all('div',
                           class_='catalog-item__bottom')  # –ü–æ—à—É–∫ —É—Å—ñ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ –∑ —Ü—ñ–Ω–∞–º–∏ —Ç–∞ –Ω–∞–∑–≤–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ.
    product_names = soup.find_all('div', class_='catalog-item__info')

    products_atb = []

    for price_container, names_container in zip(prices,
                                                product_names):  # –¶–∏–∫–ª, —è–∫–∏–π —ñ—Ç–µ—Ä—É—î—Ç—å—Å—è –æ–¥–Ω–æ—á–∞—Å–Ω–æ –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö —Ü—ñ–Ω —ñ –Ω–∞–∑–≤ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤.
        price_data_tag = price_container.find('data', class_='product-price__top')  # –ø–æ—à—É–∫ —Ü—ñ–Ω–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ
        product_name_tag = names_container.find('div', class_='catalog-item__title')  # –ø–æ—à—É–∫ —ñ–º–µ–Ω—ñ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ

        if price_data_tag and product_name_tag:  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –ø—Ä–æ —Ü—ñ–Ω—É —Ç–∞ –Ω–∞–∑–≤—É –ø—Ä–æ–¥—É–∫—Ç—É.
            price_value = float(price_data_tag['value'])  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Ü—ñ–Ω–∏.
            product_name_tag_a = product_name_tag.find('a')
            if product_name_tag_a:  # –ü–æ—à—É–∫ —Ç–µ–≥—É <a>, —è–∫–∏–π –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç.
                product_name = product_name_tag_a.text.strip()  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É (–Ω–∞–∑–≤–∏ –ø—Ä–æ–¥—É–∫—Ç—É) —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤.
                href_link = product_name_tag_a[
                    'href']  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –∞—Ç—Ä–∏–±—É—Ç—É href —Ç–µ–≥—É <a> (–ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç).
                masked_product_name = f"[{product_name}](https://www.atbmarket.com{href_link})"
                products_atb.append({"name": f"{masked_product_name}", "price": price_value})

    return products_atb


def extract_tavria_data(html_content):
    soup = bs(html_content, "html.parser")
    products = soup.find_all('div', class_='products__item')

    products_tavria = []

    for product in products:
        price_data_tag = product.find('p', class_='product__price')  # –ø–æ—à—É–∫ —Ü—ñ–Ω–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ
        product_name_tag = product.find('p', class_='product__title')  # –ø–æ—à—É–∫ —ñ–º–µ–Ω—ñ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ

        if price_data_tag and product_name_tag:
            price_value_match = re.search(r'(\d+\.\d+)', price_data_tag.text)
            price_value = float(price_value_match.group()) if price_value_match else float('inf')

            product_name_tag_a = product_name_tag.find('a')
            if product_name_tag_a:
                product_name = product_name_tag_a.text.strip()
                href_link = product_name_tag_a['href']
                masked_product_name = f"[{product_name}](https://www.tavriav.ua{href_link})"
                products_tavria.append({"name": f"{masked_product_name}", "price": price_value})

    return products_tavria



@bot.message_handler(func=lambda message: True)
def start(message):
    bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å, —â–æ –≤–∏ —à—É–∫–∞—î—Ç–µ:")
    bot.register_next_step_handler(message, choose_store)


def choose_store(message):
    keyboard = types.ReplyKeyboardMarkup( resize_keyboard=True)
    button_atb = types.KeyboardButton('–ê–¢–ë')
    button_tavria = types.KeyboardButton('–¢–∞–≤—Ä—ñ—è')
    button_all = types.KeyboardButton('–í—Å—ñ –º–∞–≥–∞–∑–∏–Ω–∏')
    button = types.KeyboardButton('üîç–ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä–∞')
    keyboard.add(button_atb, button_tavria, button_all,button)

    msg = bot.reply_to(message, "–í–∏–±–µ—Ä—ñ—Ç—å –º–∞–≥–∞–∑–∏–Ω:", reply_markup=keyboard)

    # Store user input for this chat
    user_inputs[message.chat.id] = {'query': message.text}

    bot.register_next_step_handler(msg, process_store_choice)


def process_store_choice(message):
    chat_id = message.chat.id

    if message.text.lower() == '–∞—Ç–±':
        search_in_atb(chat_id)
    elif message.text.lower() == '—Ç–∞–≤—Ä—ñ—è':
        search_in_tavria(chat_id)
    elif message.text.lower() == '–≤—Å—ñ –º–∞–≥–∞–∑–∏–Ω–∏':
        search_in_all_stores(chat_id)
    elif message.text.lower() == 'üîç–ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä–∞':
        start(message)
    else:
        bot.reply_to(message, "–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


def search_in_atb(chat_id):
    zapit = user_inputs[chat_id]['query']
    url_atb = f"https://www.atbmarket.com/sch?page=1&lang=uk&location=1154&query={zapit}"
    html_content_atb = get_html_content(url_atb)
    products_atb = extract_atb_data(html_content_atb)
    send_results(chat_id, "–ê–¢–ë", products_atb)


def search_in_tavria(chat_id):
    zapit = user_inputs[chat_id]['query']
    url_tavria = f"https://www.tavriav.ua/catalog/search/?query={zapit}"
    html_content_tavria = get_html_content(url_tavria)
    products_tavria = extract_tavria_data(html_content_tavria)
    send_results(chat_id, "–¢–∞–≤—Ä—ñ—è", products_tavria)


def search_in_all_stores(chat_id):
    zapit = user_inputs[chat_id]['query']
    url_atb = f"https://www.atbmarket.com/sch?page=1&lang=uk&location=1154&query={zapit}"
    html_content_atb = get_html_content(url_atb)
    products_atb = extract_atb_data(html_content_atb)
    send_results(chat_id, "–ê–¢–ë", products_atb)

    zapit = user_inputs[chat_id]['query']
    url_tavria = f"https://www.tavriav.ua/catalog/search/?query={zapit}"
    html_content_tavria = get_html_content(url_tavria)
    products_tavria = extract_tavria_data(html_content_tavria)
    send_results(chat_id, "–¢–∞–≤—Ä—ñ—è", products_tavria)


def send_results(chat_id, store_name, products):
    sorted_products = sorted(products, key=lambda x: x["price"])

    result_message = f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É —É –º–∞–≥–∞–∑–∏–Ω—ñ {store_name}:\n"
    for product in sorted_products:
        masked_link = f"{store_name}", f"{product['name']}, –¶—ñ–Ω–∞: {product['price']}"
        result_message += f"{masked_link}\n"

    message_chunks = [result_message[i:i + 4096] for i in range(0, len(result_message), 4096)]

    for chunk in message_chunks:
        bot.send_message(chat_id, chunk, parse_mode='Markdown')


if __name__ == "__main__":
    bot.polling()
